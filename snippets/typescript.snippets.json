{
	"Redux Store Skeleton": {
		"prefix": "store",
		"body": [
			"import {ActionsUnion, createAction, ofType} from '@martin_hotell/rex-tils';",
			"import {ActionsObservable, combineEpics, Epic} from 'redux-observable';",
			"import {ajax} from 'rxjs/ajax';",
			"import {delay, map, mergeMap} from 'rxjs/operators';",
			"\r",
			"import {ApplicationState} from '..';",
			"\r",
			"//",
			"// State",
			"//",
			"export interface ${1:StoreName}State {",
			"\treadonly template?: string;",
			"}",
			"\r",
			"const initialState: ${1:StoreName}State = {",
			"\ttemplate: undefined,",
			"};",
			"\r",
			"//",
			"// Actions",
			"//",
			"export enum ActionTypes {",
			"\tFETCH_TEMPLATE = '@@${2:NameSpace}/${1:StoreName}/FETCH_TEMPLATE',",
			"\tSET_TEMPLATE = '@@${2:NameSpace}/${1:StoreName}/SET_TEMPLATE',",
			"}",
			"\r",
			"export const actions = {",
			"\tfetchTemplate: () => createAction(ActionTypes.FETCH_TEMPLATE),",
			"\tsetTemplate: (newTemplate: string) => createAction(ActionTypes.SET_TEMPLATE, {newTemplate}),",
			"};",
			"\r",
			"type ${1:StoreName}sActions = ActionsUnion<typeof actions>;",
			"\r",
			"//",
			"// Reducer",
			"//",
			"export function reducer(state: ${1:StoreName}State = initialState, action: ${1:StoreName}sActions): ${1:StoreName}State {",
			"\tswitch (action.type) {",
			"\t\tcase ActionTypes.SET_TEMPLATE:",
			"\t\t\treturn {...state, template: action.payload.newTemplate};",
			"\t\tcase ActionTypes.FETCH_TEMPLATE: // handled by epic",
			"\t\tdefault:",
			"\t\t\treturn state;",
			"\t}",
			"}",
			"\r",
			"//",
			"// Selectors",
			"//",
			"const templateSelector = (state: ApplicationState) => state.${3:PathToStore}.${1:StoreName}.template;",
			"\r",
			"export const selectors = {",
			"\ttemplate: templateSelector,",
			"};",
			"\r",
			"//",
			"// Async action handlers (Epics, Sagas, etc)",
			"//",
			"const fetchTemplateEpic: Epic<${1:StoreName}sActions> = (actions$: ActionsObservable<${1:StoreName}sActions>) => actions$",
			"\t.pipe(",
			"\t\tofType(ActionTypes.FETCH_TEMPLATE),",
			"\t\tdelay(1000),",
			"\t\tmergeMap(action =>",
			"\t\t\tajax.getJSON('/api/endpoint').pipe(",
			"\t\t\t\tmap(response => actions.setTemplate('response'))",
			"\t\t\t)",
			"\t\t)",
			"\t);",
			"\r",
			"export const epics = combineEpics(",
			"\tfetchTemplateEpic,",
			");"
		],
		"description": "[Sandstorm] Type safe Redux store."
	}
}
